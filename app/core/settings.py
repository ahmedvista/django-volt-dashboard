"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os, random, string, inspect
from pathlib import Path
from dotenv import load_dotenv

# import django_dyn_dt


# Construct the relative path to your .env file
relative_env_path = os.path.join(os.getcwd(), "app", "config", "env.sample")
load_dotenv(relative_env_path)  # take environment variables from .env.

relative_env_path = os.path.join(os.getcwd(), "config", "env.sample")
load_dotenv(relative_env_path)  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    SECRET_KEY = "".join(random.choice(string.ascii_lowercase) for i in range(32))

# Render Deployment Code
DEBUG = "RENDER" not in os.environ


# Add here your deployment HOSTS
ALLOWED_HOSTS = str(os.environ.get("ALLOWED_HOSTS")).split(",")
CSRF_TRUSTED_ORIGINS = str(os.environ.get("CSRF_TRUSTED_ORIGINS")).split(",")
DOMAIN = os.environ.get("DOMAIN")
if DOMAIN:
    ALLOWED_HOSTS.append(str(DOMAIN))
    CSRF_TRUSTED_ORIGINS.append(f"http://{DOMAIN}")
    CSRF_TRUSTED_ORIGINS.append(f"https://{DOMAIN}")
HOST_IP = os.environ.get("HOST_IP")
if HOST_IP:
    ALLOWED_HOSTS.append(str(HOST_IP))
    CSRF_TRUSTED_ORIGINS.append(f"http://{HOST_IP}")
    CSRF_TRUSTED_ORIGINS.append(f"https://{HOST_IP}")

print(CSRF_TRUSTED_ORIGINS)
RENDER_EXTERNAL_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

INSTALLED_APPS = [
    "admin_volt.apps.AdminVoltConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # "home",
    "apps.home",
    "apps.product",
    "apps.fabrication",
    "apps.orders",
    "apps.stock",
    # models graph
    "django_extensions",
    # Tooling Dynamic_DT
    # "django_dyn_dt",  # <-- NEW: Dynamic_DT
    # Tooling API-GEN
    "django_api_gen",  # Django API GENERATOR  # <-- NEW
    "rest_framework",  # Include DRF           # <-- NEW
    "rest_framework.authtoken",  # Include DRF Auth      # <-- NEW
    # icons
    "fontawesomefree",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"


TEMPLATES_DIRS = []

HOME_TEMPLATES = os.path.join(BASE_DIR, "templates")
# TEMPLATE_DIR_DATATB = os.path.join(BASE_DIR, "django_dyn_dt/templates")  # <-- NEW: Dynamic_DT

TEMPLATES_DIRS.append(HOME_TEMPLATES)
# TEMPLATES_DIRS.append(TEMPLATE_DIR_DATATB)


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": TEMPLATES_DIRS,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DB_ENGINE = os.getenv("DB_ENGINE", None)
DB_USERNAME = os.getenv("DB_USERNAME", None)
DB_PASS = os.getenv("DB_PASS", None)
DB_HOST = os.getenv("DB_HOST", None)
DB_PORT = os.getenv("DB_PORT", None)
DB_NAME = os.getenv("DB_NAME", None)

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends." + DB_ENGINE,
            "NAME": DB_NAME,
            "USER": DB_USERNAME,
            "PASSWORD": DB_PASS,
            "HOST": DB_HOST,
            "PORT": DB_PORT,
        },
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "db.sqlite3",
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles/")

# DYN_DB_PKG_ROOT = os.path.dirname(inspect.getfile(django_dyn_dt))  # <-- NEW: Dynamic_DT

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
    # os.path.join(DYN_DB_PKG_ROOT, "templates/static"),  # <-- NEW: Dynamic_DT
)

# if not DEBUG:
#    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = "/"
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


# ### DYNAMIC_DATATB Settings ###
# all_models = apps.get_models()
# for model in all_models:
#     print(model.__name__)
DYNAMIC_DATATB = {
    # SLUG -> Import_PATH
    # "home": "apps.home.models.Home",
    ########################################
    # product
    ########################################
    "product": "apps.product.models.Product",
    "raw": "apps.product.models.Raw",
    "rawForProduction": "apps.product.models.RawForProduction",
    "productAttr": "apps.product.models.ProductAttr",
    ########################################
    # orders
    ########################################
    "client": "apps.orders.models.Client",
    "supplier": "apps.orders.models.Supplier",
    "productOrder": "apps.orders.models.ProductOrder",
    "rawOrder": "apps.orders.models.RawOrder",
    "budget": "apps.orders.models.Budget",
    "damagedRaw": "apps.orders.models.DamagedRaw",
    "damagedProduct": "apps.orders.models.DamagedProduct",
    ########################################
    # stock
    ########################################
    "productStock": "apps.stock.models.ProductStock",
    "rawStock": "apps.stock.models.RawStock",
}
########################################

# ### API-GENERATOR Settings ###
API_GENERATOR = DYNAMIC_DATATB
# API_GENERATOR = {
#     # SLUG -> Import_PATH
#     # "home": "apps.home.models.Home",
#     "product": "apps.product.models.Product",
# }

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
}
########################################
GRAPH_MODELS = {
    "all_applications": True,
    "graph_models": True,
}
